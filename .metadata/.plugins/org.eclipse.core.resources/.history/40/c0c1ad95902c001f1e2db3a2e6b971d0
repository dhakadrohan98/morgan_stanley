package com.wissen;

import java.util.*;

public class MoveZeroesToEnd {

	public static void pushZerosToEnd(int[] nums, int n) {
        List<Integer> list = new ArrayList()<>();
            
            for(int i=0; i<n; i++) {
                if(nums[i] != 0) {
                    list.offer(nums[i]);
                }
            }
            System.out.println(list);
            
            int size = list.size();
            for(int i=0; i<size; i++) {
                if(nums[i] == 0 && list.size() >= 1) {
                    nums[i] = list.getFirst();
                    list.removeFirst();
                }
                else {
                	list.remove(nums[i]);
                }
            }
            int remaining = n-size;
            
            for(int i=n-1; i > n-remaining-1; i--) {
                nums[i] = 0;
            }
    }
	
	public static void main(String[] args) {
		int[] nums = {3, 5, 0, 0, 4};
		int[] nums1 = {0, 0, 0, 4};
		int[] nums2 = {0,1,0,3,12};
		pushZerosToEnd(nums, nums.length);
		
		for(int val:nums) {
			System.out.println(val);
		}

	}
	
	
	//Naive approach
	
	//TC: O(n^2)
    //SC: O(1)
    public void moveZeroes1(int[] nums) {
        int n = nums.length;
        
        for(int i=0; i<n; i++) {
            if(nums[i] == 0) {
                for(int j=i+1; j<n; j++) {
                    if(nums[j] != 0) {
                        swap(nums, i, j);
                        break;
                    }
                }
            }
        }
    }
    
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

}
